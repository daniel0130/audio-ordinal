// loadPako and deserialise functions <dataProcessingCore>
async function loadPako(){try{const e=await fetch("/content/2109694f44c973892fb8152cf5c68607fb19288c045af1abc1716c1c3b4d69e6i0"),t=await e.text(),n=(new DOMParser).parseFromString(t,"text/html").querySelector("script");if(!n||!n.textContent.includes("pako"))throw new Error("Pako library not found in the HTML content.");document.head.append(Object.assign(document.createElement("script"),{textContent:n.textContent}))}catch(e){console.error("Error occurred during Pako loading:",e)}}async function fetchAndDeserialize(e){try{const t=await fetch(e);if(!t.ok)throw new Error(`Network response was not ok for URL: ${e}`);const n=await t.arrayBuffer(),r=pako.inflate(new Uint8Array(n));return deserialize(JSON.parse(new TextDecoder("utf-8").decode(r)))}catch(e){throw console.error("Error in fetchAndDeserialize:",e),e}}function shuffleArray(e,t){for(let n=e.length-1;n>0;n--){const r=Math.floor(seededRandom(t++)*(n+1));[e[n],e[r]]=[e[r],e[n]]}return e}const BPM_VALUES=[80,100,120,140,160,180,240];function selectBPM(e){return BPM_VALUES[Math.floor(seededRandom(e)*BPM_VALUES.length)]}async function processSerializedData(e){try{await loadPako();const t=(await Promise.all(e.map((async e=>{try{const t=await fetchAndDeserialize(e);if(!t?.projectSequences)throw new Error(`Invalid data at URL ${e}`);return t}catch(e){return console.error("Error processing URL:",e),null}})))).filter(Boolean);if(!t.length)throw new Error("No valid data was processed.");const n=selectBPM(window.seed);t.forEach((e=>{const t=n/e.projectBPM;e.channelPlaybackSpeed=e.channelPlaybackSpeed.map((r=>Math.abs(n-e.projectBPM)>=n/2?r:r*t))}));const r=shuffleArray(t.flatMap(((e,t)=>e.channelURLs.map(((n,r)=>({url:n,volume:e.channelVolume[r],speed:e.channelPlaybackSpeed[r],trim:e.trimSettings[r],source:`data${t+1}`,index:r}))))),window.seed).slice(0,24),o={...t[0],projectBPM:n,channelURLs:r.map((e=>e.url)),channelVolume:r.map((e=>e.volume)),channelPlaybackSpeed:r.map((e=>e.speed)),trimSettings:r.map((e=>e.trim)),projectSequences:{}},a=t.reduce(((e,t,n)=>({...e,[`data${n+1}`]:t})),{});for(const e in t[0].projectSequences)o.projectSequences[e]={},r.forEach(((t,n)=>{const r=a[t.source]?.projectSequences[e];o.projectSequences[e][`ch${n}`]=r?.[`ch${t.index}`]||{steps:[]}}));window.jsonDataUrl=URL.createObjectURL(new Blob([JSON.stringify(o)],{type:"application/json"})),document.dispatchEvent(new CustomEvent("dataProcessingComplete")),console.log(`[${(new Date).toISOString()}] [debugScriptloading] Data processing complete.`)}catch(e){console.error("Error processing data in processSerializedData:",e)}}console.log(`[${(new Date).toISOString()}] DataProcessingCore initialized.`);

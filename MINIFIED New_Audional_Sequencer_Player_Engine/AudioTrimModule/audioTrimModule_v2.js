class AudioTrimmer{constructor(t){console.log("[Class Functions] constructor",{channelIndex:t}),this.channelIndex=t,this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.audioBuffer=null,this.isPlaying=!1,this.isLooping=!1,this.initializeSliderTrack(t);const e=getTrimSettings(this.channelIndex);console.log("getSettings read into trimSettings in AudioTrimmer class constructor",e),this.startSliderValue=e.startSliderValue,this.endSliderValue=e.endSliderValue,console.log("startSliderValue and endSliderValue in AudioTrimmer class constructor",this.startSliderValue,this.endSliderValue),this.displayTimeout=null}initializeSliderTrack(){this.sliderTrack=document.querySelector(".slider-track"),this.sliderTrack||console.error("Slider track not found")}updateTrimmedSampleDuration(){const t=this.startSliderValue,e=this.endSliderValue;this.trimmedSampleDuration=Math.max(0,e-t),this.debounceDisplayValues()}getStartSliderValue(){return this.startSliderValue}getEndSliderValue(){return this.endSliderValue}sliderValueToTimecode(t,e){return t/100*e}debounceDisplayValues(){this.displayTimeout&&clearTimeout(this.displayTimeout),this.displayTimeout=setTimeout((()=>this.displayValues()),300)}displayValues(){console.log("Start Slider Value:",this.startSliderValue),console.log("End Slider Value:",this.endSliderValue),console.log("Trimmed Sample Duration:",this.trimmedSampleDuration)}setAudioBuffer(t){console.log("[Class Functions] setAudioBuffer",{audioBuffer:t}),this.audioBuffer=t,this.drawWaveform(),console.log(" updateDimmedAreas method called from setAudioBuffer"),this.updateDimmedAreas(),this.updateSliderValues()}drawWaveform(){if(console.log("[Class Functions] drawWaveform"),!this.audioBuffer)return void console.log("[Class Functions] drawWaveform - No audio buffer");const t=this.waveformCanvas.width,e=this.waveformCanvas.height,i=this.audioBuffer.getChannelData(0),s=Math.ceil(i.length/t),o=e/2;this.ctx.clearRect(0,0,t,e),this.ctx.beginPath();for(let e=0;e<t;e++){const{min:t,max:a}=this.getMinMax(i,e*s,s);this.ctx.moveTo(e,o*(1+t)),this.ctx.lineTo(e,o*(1+a))}this.ctx.stroke()}async initialize(){console.log("[Class Functions] initialize");let t=!0;["ordinalIdInput","loadSampleButton","waveformCanvas","playbackCanvas","trimmerPlayButton","trimmerStopButton","loopButton","startDimmed","endDimmed","startSlider","endSlider"].forEach((e=>{this[e]=document.getElementById(e),this[e]||(console.error(`[Class Functions] initialize - Element not found: ${e}`),t=!1)})),t?(this.ctx=this.waveformCanvas.getContext("2d"),this.addEventListeners(),console.log(" updateDimmedAreas method called from initialize"),this.updateDimmedAreas(),this.updateSliderValues()):(console.log("[Class Functions] initialize - Waiting for elements to be available"),setTimeout((()=>this.initialize()),500));const e=getTrimSettings(this.channelIndex);this.startSlider.value=e.startSliderValue,this.endSlider.value=e.endSliderValue,this.isLooping=e.isLooping,this.updateLoopButtonState(),this.updateDimmedAreas(),this.updateSliderValues(),this.playbackCtx=this.playbackCanvas.getContext("2d"),this.playbackCtx.fillStyle="red"}updateSliderValues(){const t=this.startSliderValue/100*this.sliderTrack.offsetWidth,e=this.endSliderValue/100*this.sliderTrack.offsetWidth;this.startSlider.style.left=`${t}px`,this.endSlider.style.left=`${e}px`,this.updateDimmedAreas(),console.log("updateDimmedAreas method called from updateSliderValues"),this.updateTrimmedSampleDuration(),this.debounceDisplayValues()}updateDimmedAreas(){console.log("[Class Functions] updateDimmedAreas function entered into");const t=this.startSliderValue,e=this.endSliderValue,i=`${t}%`,s=100-e+"%";this.startDimmed.style.width=i,this.startDimmed.style.left="0",this.endDimmed.style.width=s,this.endDimmed.style.left=`${e}%`}addEventListeners(){console.log("[Class Functions] addEventListeners"),this.boundPlayTrimmedAudio=this.playTrimmedAudio.bind(this),this.boundStopAudio=this.stopAudio.bind(this),this.trimmerPlayButton.removeEventListener("click",this.boundPlayTrimmedAudio),this.trimmerStopButton.removeEventListener("click",this.boundStopAudio),this.trimmerPlayButton.addEventListener("click",this.boundPlayTrimmedAudio),this.trimmerStopButton.addEventListener("click",this.boundStopAudio),this.loopButton.addEventListener("click",this.toggleLoop.bind(this));const t=(t,e)=>{const i=e?this.startSlider:this.endSlider;if(console.log("[Slider Mouse Down] Slider: "+(e?"Start":"End")),!i)return void console.error("Slider element is undefined");const s=t.clientX-i.getBoundingClientRect().left;document.onmousemove=t=>{if(!this.sliderTrack)return void console.error("Slider track is undefined");let o=t.clientX-s-this.sliderTrack.getBoundingClientRect().left;if(o=Math.max(0,Math.min(o,this.sliderTrack.offsetWidth-i.offsetWidth)),e){const t=this.endSlider.getBoundingClientRect().left-this.sliderTrack.getBoundingClientRect().left;o=Math.min(o,t)}else{const t=this.startSlider.getBoundingClientRect().right-this.sliderTrack.getBoundingClientRect().left;o=Math.max(o,t)}i.style.left=`${o}px`;const a=o/this.sliderTrack.offsetWidth*100;e?this.startSliderValue=a:this.endSliderValue=a;let n=unifiedSequencerSettings.settings.masterSettings.trimSettings;n[this.channelIndex]={...n[this.channelIndex],startSliderValue:this.startSliderValue,endSliderValue:this.endSliderValue},updateTrimSettingsUI(n),this.updateSliderValues()},document.onmouseup=()=>{document.onmousemove=document.onmouseup=null}};this.startSlider.addEventListener("mousedown",(e=>t(e,!0))),this.endSlider.addEventListener("mousedown",(e=>t(e,!1)))}async loadSample(){if(console.log("[Class Functions] loadSample"),this.ordinalIdInput.value)try{this.audioBuffer=await fetchAudio(`https://ordinals.com/content/${this.ordinalIdInput.value}`),this.trimSettings=getTrimSettings(this.channelIndex),this.drawWaveform(),console.log(" updateDimmedAreas method called from loadSample"),this.updateSliderValues(),this.updateDimmedAreas()}catch(t){console.error("Error loading audio:",t)}}getMinMax(t,e,i){let s=1,o=-1;for(let a=0;a<i;a++){const i=t[e+a];i<s&&(s=i),i>o&&(o=i)}return{min:s,max:o}}getIsLooping(){return this.isLooping}setIsLooping(t){this.isLooping=t,this.updateLoopButtonState()}updateLoopButtonState(){console.log(`[updateLoopButtonState] isLooping: ${this.isLooping}`),this.loopButton&&(this.isLooping?(this.loopButton.classList.add("on"),this.loopButton.classList.remove("off")):(this.loopButton.classList.add("off"),this.loopButton.classList.remove("on")))}playTrimmedAudio(){if(console.log("[playTrimmedAudio] [Class Functions] playTrimmedAudio"),this.isPlaying)return void console.log("[playTrimmedAudio] Audio is already playing, not starting new playback");if(!this.audioBuffer)return void console.error("[playTrimmedAudio] No audio buffer loaded");this.isPlaying=!0,console.log("[playTrimmedAudio] isPlaying set to true, starting new playback");const t=this.sliderValueToTimecode(this.startSliderValue,this.audioBuffer.duration);this.startTime=this.audioContext.currentTime-t;const e=this.sliderValueToTimecode(this.startSliderValue,this.audioBuffer.duration),i=this.sliderValueToTimecode(this.endSliderValue,this.audioBuffer.duration);this.sourceNode&&this.sourceNode.disconnect(),this.sourceNode=this.audioContext.createBufferSource(),this.sourceNode.buffer=this.audioBuffer,this.sourceNode.connect(this.audioContext.destination),this.sourceNode.loop=this.isLooping,this.isLooping&&(this.sourceNode.loopStart=e,this.sourceNode.loopEnd=i),this.sourceNode.start(0,e,i-e),console.log("[playTrimmedAudio] Playback started"),this.animatePlayback(),this.sourceNode.onended=()=>{this.isPlaying=!1,this.isLooping?this.playTrimmedAudio():(console.log("[playTrimmedAudio] Playback ended, isPlaying set to false"),this.animationFrameRequest&&cancelAnimationFrame(this.animationFrameRequest))}}stopAudio(){console.log("[Class Functions] stopAudio"),this.setIsLooping(!1),this.isPlaying&&this.sourceNode&&(this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null,this.isPlaying=!1),this.animationFrameRequest&&cancelAnimationFrame(this.animationFrameRequest)}toggleLoop(){console.log("[Class Functions] toggleLoop"),this.isLooping=!this.isLooping,this.updateLoopButtonState(),this.isPlaying&&this.playTrimmedAudio()}getCurrentPlaybackPosition(){if(!this.isPlaying)return 0;const t=this.sliderValueToTimecode(this.startSliderValue,this.audioBuffer.duration);return(this.audioContext.currentTime-this.startTime)%this.audioBuffer.duration+t}updatePlaybackCanvas(){const t=this.audioContext.currentTime-this.startTime,e=this.sliderValueToTimecode(this.startSliderValue,this.audioBuffer.duration),i=this.sliderValueToTimecode(this.endSliderValue,this.audioBuffer.duration)-e,s=(t-e)%i;if(s<0||s>i)return;const o=this.playbackCanvas.width,a=this.playbackCanvas.height,n=this.startSliderValue/100*o,l=n+s/i*(this.endSliderValue/100*o-n);this.playbackCtx.clearRect(0,0,o,a),this.playbackCtx.beginPath(),this.playbackCtx.moveTo(l,0),this.playbackCtx.lineTo(l,a),this.playbackCtx.strokeStyle="#FF0000",this.playbackCtx.lineWidth=2,this.playbackCtx.stroke()}animatePlayback(){this.isPlaying?(console.log("[animatePlayback] Animation frame requested."),this.updatePlaybackCanvas(),this.animationFrameRequest=requestAnimationFrame((()=>this.animatePlayback()))):console.log("[animatePlayback] Animation stopped. 'isPlaying' is false.")}}
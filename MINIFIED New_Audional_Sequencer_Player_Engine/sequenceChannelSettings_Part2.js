let totalSequenceCount=16,isContinuousPlay=!0;function initializeNewSequence(e){console.log("initializeNewSequence entered"),console.log(`[initializeNewSequence] Initializing new sequence. Current sequence: ${e}`);let n=Array(16).fill().map((()=>[null].concat(Array(64).fill(!1)))),t=e+1;console.log(`[initializeNewSequence] New sequence: ${e}`),window.unifiedSequencerSettings.setCurrentSequence(t,n),console.log(`[SeqDebug] [initializeNewSequence] newSequenceCreated ${e} ${n}`)}function loadSequence(e){console.log("loadSequence entered");let n=window.unifiedSequencerSettings.getSettings("projectSequences")[`Sequence${e}`];console.log(`[loadSequence] Loading sequence ${e}...`),"object"==typeof n?(updateUIForSequence(e),Object.entries(n).forEach((([n,t])=>{const o=parseInt(n.replace("ch",""),10);updateChannelUI(e,o,t.steps)}))):console.error(`Sequence ${e} is not an object.`,n)}function loadNextSequence(){console.log("loadNextSequence entered");let e=window.unifiedSequencerSettings.getCurrentSequence();if(e<totalSequenceCount-1){const n=e+1;console.log(`[SeqDebug] Calling handleSequenceTransition with sequence: ${n}`),handleSequenceTransition(n),updateSequenceDisplay(n)}else console.warn("You've reached the last sequence.")}function updateChannelUI(e,n,t){console.log("updateChannelUI entered"),console.log(`[SeqDebug] [updateChannelUI] Updating UI for sequence ${e} channel ${n}`);const o=document.querySelector(`.channel[data-id="Channel-${n}"]`);if(!o)return void console.error(`Channel element not found for index: ${n}`);o.querySelectorAll(`.step-button[id^="Sequence${e}-ch${n}"]`).forEach(((e,n)=>{t[n]?e.classList.add("selected"):e.classList.remove("selected")}))}function updateSequenceDisplay(e){const n=document.getElementById("current-sequence-display");n&&(n.textContent="Sequence "+e),updateActiveQuickPlayButton()}function updateUIForSequence(e){console.log("updateUIForSequence entered"),console.log(`[SeqDebug] [updateUIForSequence] Updating UI for Sequence ${e}`);const n=window.unifiedSequencerSettings.getSettings("masterSettings").projectSequences[`Sequence${e}`];console.log(`[SeqDebug] [debugging Step Button IDs] Sequence Settings for Sequence ${e}:`,n),e>=0&&e<64?channels.forEach(((t,o)=>{const c=t.querySelectorAll(".step-button"),u=t.querySelectorAll(".toggle-mute");console.log(`[SeqDebug] [debugging Step Button IDs][updateUIForSequence] Processing Channel: ${o}, Step Buttons Found: ${c.length}`),n&&n[`ch${o}`]&&n[`ch${o}`].steps?(c.forEach((e=>e.classList.remove("selected"))),u.forEach((e=>e.classList.remove("toggle-mute"))),n[`ch${o}`].steps.forEach(((e,n)=>{console.log(`[SeqDebug][debugging Step Button IDs] [updateUIForSequence] Channel: ${o}, Position: ${n}, Step State: ${e}`),e&&(c[n]?(c[n].classList.add("selected"),console.log(`[SeqDebug][debugging Step Button IDs][updateUIForSequence] Adding 'selected' class to Step Button at Position: ${n} in Channel: ${o}`)):console.error(`[SeqDebug][debugging Step Button IDs][updateUIForSequence] Step Button not found at Position: ${n} in Channel: ${o}`))}))):console.error(`[SeqDebug][debugging Step Button IDs][updateUIForSequence] Missing step data for Channel: ${o} in Sequence: ${e}`)})):console.error("[SeqDebug][debugging Step Button IDs] [updateUIForSequence] Invalid sequence number:",e)}function changeSequence(e){console.log("changeSequence entered"),currentSequence=e,onSequenceOrDataChange()}function updateStep(e,n,t){console.log("updateStep entered"),channelSettings[e][n]=t,window.unifiedSequencerSettings.updateStepState(currentSequence,e,n,t),console.log(`updateStepState called with sequence: ${currentSequence}, channelIndex: ${e}, stepIndex: ${n}, state: ${t}`)}document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("continuous-play");e.addEventListener("click",(()=>{isContinuousPlay=!isContinuousPlay,e.classList.toggle("selected",isContinuousPlay)}))})),window.addEventListener("setupComplete",(function(){loadAndDisplaySequence(0)})),document.getElementById("next-sequence").addEventListener("click",(function(){console.log("Next sequence button clicked."),loadNextSequence()})),document.getElementById("prev-sequence").addEventListener("click",(function(){console.log("Previous sequence button clicked.");let e=window.unifiedSequencerSettings.getCurrentSequence();if(console.log(`Current sequence before decrement: ${e}`),e>0){const n=e-1;console.log(`[SeqDebug] Calling handleSequenceTransition with sequence: ${n}`),handleSequenceTransition(n),updateSequenceDisplay(n)}else console.warn("You're already on the first sequence.")})),console.log("Initial channel settings:",window.unifiedSequencerSettings.getSettings("projectSequences"));
function getChannelURL(e){return cons,window.unifiedSequencerSettings.channelURLs(e)}function updateTrimSettingsUI(e){console.log("debugGlobalObjectToUI - entered"),console.log("{debugGlobalObjectToUI} updateTrimSettingsUI: updating with trimSettings",e),console.log("Trim settings UI updated:",e),e.forEach(((e,t)=>{const n=document.getElementById(`start-slider-${t}`),o=document.getElementById(`end-slider-${t}`);n&&o&&(n.value=e.startSliderValue,o.value=e.endSliderValue)}))}function updateProjectChannelNamesUI(e){console.log("debugGlobalObjectToUI - entered"),console.log("{debugGlobalObjectToUI} updateProjectChannelNamesUI: updating with URL names",e),console.log("Project URL names UI updated:",e),e.forEach(((e,t)=>{const n=document.getElementById(`url-name-${t}`);n&&(n.textContent=e)}))}function updateBPMUI(e){console.log("debugGlobalObjectToUI - entered");const t=document.getElementById("bpm-slider"),n=document.getElementById("bpm-display");t&&n&&(t.value=e,n.textContent=e)}function updateProjectNameUI(e){console.log("debugGlobalObjectToUI - entered");const t=document.getElementById("project-name");t&&(t.value=e)}function updateSpecificStepUI(e,t,n){console.log("debugGlobalObjectToUI - entered");const o=`Sequence${e}-ch${t}-step-${n}`;console.log(`Looking for step button with ID: ${o}`);const c=document.getElementById(o);if(c){let s=window.unifiedSequencerSettings.getStepState(e,t,n);console.log(`[updateSpecificStepUI] Step button found: Sequence ${e}, Channel ${t}, Step ${n}, Current State: ${s}`),s?(c.classList.add("selected"),console.log(`[updateSpecificStepUI] Added 'selected' class to step button with ID: ${o}`)):(c.classList.remove("selected"),console.log(`[updateSpecificStepUI] Removed 'selected' class from step button with ID: ${o}`))}else console.error(`Step button not found for the given IDs: ${o}`)}function getProjectSequences(){console.log("debugGlobalObjectToUI - entered");window.unifiedSequencerSettings;return window.unifiedSequencerSettings.getSettings("projectSequences")}function setGlobalProjectURLs(e){console.log("debugGlobalObjectToUI - entered"),window.unifiedSequencerSettings.setProjectURLs(e),console.log("[setGlobalProjectURLs] Project URLs updated:",e)}function setTrimSettings(e,t,n){"number"==typeof t&&"number"==typeof n?(window.unifiedSequencerSettings.setTrimSettings(e,t,n),console.log(`[setGlobalTrimSettings] Trim settings updated for channel ${e}: Start Slider Value = ${t}, End Slider Value = ${n}`)):console.error("Invalid trim settings values")}function updateProjectSequencesUI(e){console.log("debugGlobalObjectToUI - entered"),console.log("{debugGlobalObjectToUI} [updateProjectSequencesUI] updateProjectSequencesUI: updating with sequences",e),console.log(`[updateProjectSequencesUI] Total sequences to process: ${Object.keys(e).length}`),Object.keys(e).forEach((t=>{const n=e[t];console.log(`[updateProjectSequencesUI] Processing sequence: ${t}`),Object.keys(n).forEach((e=>{const o=n[e].steps;Array.isArray(o)?o.forEach(((n,o)=>{const c=`${t}-${e}-step-${o}`,s=document.getElementById(c);s&&(!0===n?s.classList.contains("selected")||s.classList.add("selected"):s.classList.contains("selected")&&(console.log(`[updateProjectSequencesUI] Removing 'selected' class from stepControl: ${c}`),s.classList.remove("selected")))})):console.log(`[updateProjectSequencesUI] Steps data for channel ${e} in sequence ${t} is not an array`)}))}))}function getTrimSettings(e){return console.log("debugGlobalObjectToUI - entered"),window.unifiedSequencerSettings.getTrimSettings(e)}document.addEventListener("DOMContentLoaded",(()=>{for(let e=0;e<16;e++)for(let t=0;t<16;t++){let n=document.querySelector(`#channel-${t}-steps-container`);n||(n=document.createElement("div"),n.id=`channel-${t}-steps-container`,n.classList.add("steps-container"),document.body.appendChild(n)),n.innerHTML="";for(let o=0;o<64;o++){const c=document.createElement("button");c.classList.add("step-button"),c.id=`Sequence${e}-ch${t}-step-${o}`,c.addEventListener("click",(()=>{let n=window.unifiedSequencerSettings.getStepState(e,t,o);console.log(`[updateSpecificStepUI] [getStepState applied] Step button clicked: Sequence ${e}, Channel ${t}, Step ${o}, Current State: ${n}`),window.unifiedSequencerSettings.updateStepState(e,t,o,!n),console.log(`[updateSpecificStepUI] Step button clicked: Sequence ${e}, Channel ${t}, Step ${o}, New State: ${!n}`),updateSpecificStepUI(e,t,o)})),n.appendChild(c)}}}));
class UnifiedSequencerSettings{constructor(){this.observers=[],this.settings={masterSettings:{projectName:"New Audx Project",projectBPM:120,currentSequence:0,channelURLs:new Array(16).fill(""),trimSettings:Array.from({length:16},(()=>({start:.01,end:100,length:0}))),projectChannelNames:new Array(16).fill(""),projectSequences:this.initializeSequences(16,16,64)}},this.checkSettings=this.checkSettings.bind(this),this.clearMasterSettings=this.clearMasterSettings.bind(this)}exportSettings(){console.log("exportSettings entered");const e=JSON.parse(JSON.stringify(this.settings.masterSettings));for(let t in e.projectSequences){const n=e.projectSequences[t];for(let e in n){const t=n[e],s=[];t.steps.forEach(((e,t)=>{e&&s.push(t+1)})),t.steps=s}}const t=JSON.stringify(e);return console.log("[exportSettings] Exported Settings:",t),t}isValidIndex(e){return console.log("isValidIndex entered"),e>=0&&e<16}loadSettings(e){console.log("[internalPresetDebug] loadSettings entered");try{console.log("[internalPresetDebug] Received JSON Settings:",e);const t="string"==typeof e?JSON.parse(e):e;if(console.log("[internalPresetDebug] Parsed Settings:",t),this.settings.masterSettings.channelURLs=t.channelURLs?t.channelURLs.map((e=>formatURL(e))):[],this.settings.masterSettings.projectName=t.projectName,this.settings.masterSettings.projectBPM=t.projectBPM,this.settings.masterSettings.trimSettings=t.trimSettings,this.settings.masterSettings.projectChannelNames=t.projectChannelNames,console.log("[internalPresetDebug] Updated masterSettings with full URLs:",this.settings.masterSettings),t.projectSequences)for(let e in t.projectSequences){let n=t.projectSequences[e];for(let e in n){let t=n[e],s=new Array(64).fill(!1);t.steps.forEach((e=>{e>=1&&e<=64&&(s[e-1]=!0)})),t.steps=s}}this.settings.masterSettings=t,console.log("[internalPresetDebug] Master settings after update:",this.settings.masterSettings),this.updateAllLoadSampleButtonTexts(),this.notifyObservers()}catch(e){console.error("[internalPresetDebug] Error loading settings:",e)}}addChannelURL(e,t){e>=0&&e<this.settings.masterSettings.channelURLs.length?(console.log(`[addChannelURL] Adding URL to channel ${e}: ${t}`),this.settings.masterSettings.channelURLs[e]=t,this.notifyObservers()):console.error(`[addChannelURL] Invalid channel index: ${e}`)}getChannelURL(e){return e>=0&&e<this.settings.masterSettings.channelURLs.length?(console.log(`[getChannelURL] Retrieving URL from channel ${e}: ${this.settings.masterSettings.channelURLs[e]}`),this.settings.masterSettings.channelURLs[e]):(console.error(`[getChannelURL] Invalid channel index: ${e}`),null)}getprojectUrlforChannel(e){return console.log("getprojectUrlforChannel entered"),this.settings.masterSettings.channelURLs[e]}setChannelURLs(e){console.log("setProjectURLs entered"),this.settings.masterSettings.channelURLs=e,console.log("[setChannelURLs] Channel URLs set:",e),this.updateAllLoadSampleButtonTexts()}setProjectName(e){console.log("setProjectName entered"),this.settings.masterSettings.projectName=e,console.log(`[setProjectName] Project name set to: ${e}`)}clearMasterSettings(){console.log("[clearMasterSettings] Current masterSettings before clearing:",this.settings.masterSettings),this.settings.masterSettings={projectName:"",projectBPM:120,currentSequence:0,channelURLs:new Array(16).fill(""),trimSettings:Array.from({length:16},(()=>({start:.01,end:100,length:0}))),projectChannelNames:new Array(16).fill(""),projectSequences:this.initializeSequences(16,16,64)},console.log("[clearMasterSettings] Master settings cleared.")}initializeSequences(e,t,n){console.log("initializeSequences entered",e,t,n);let s={};for(let r=0;r<e;r++)s[`Sequence${r}`]=this.initializeChannels(t,n);return s}initializeChannels(e,t){console.log("initializeChannels entered",e,t);let n={};for(let s=0;s<e;s++)n[`ch${s}`]={steps:new Array(t).fill(!1),mute:!1,url:""};return n}initializeTrimSettings(e){return console.log("initializeTrimSettings entered"),channelIndex<1&&console.log("initializeTrimSettings",e),Array.from({length:e},(()=>({start:0,end:100,length:0})))}updateTrimSettingsUI(e){console.log("Trim settings UI entered and updated:",e),e.forEach(((e,t)=>{const n=document.getElementById(`start-slider-${t}`),s=document.getElementById(`end-slider-${t}`);n&&s&&(n.value=e.start,s.value=e.end)}))}addObserver(e){console.log("addObserver",e),this.observers.push(e)}notifyObservers(){console.log("notifyObservers"),this.observers.forEach((e=>e(this.settings)))}setTrimSettings(e,t,n){if(console.log("setTrimSettings entered"),e<1&&console.log("setTrimSettings",e,t,n),this.isValidIndex(e)){const s=this.settings.masterSettings.trimSettings[e];s?Object.assign(s,{start:t,end:n}):console.error(`Trim settings not found for channel index: ${e}`)}else console.error(`Invalid channel index: ${e}`)}getTrimSettings(e){console.log("getTrimSettings entered"),e<1&&console.log("getTrimSettings",e);return this.settings.masterSettings.trimSettings[e]||{start:.01,end:100}}updateTrimSettingsUI(e){console.log("updateTrimSettingsUI entered",e),console.log("Trim settings UI updated:",e),e.forEach(((e,t)=>{const n=document.getElementById(`start-slider-${t}`),s=document.getElementById(`end-slider-${t}`);n&&s&&(n.value=e.start,s.value=e.end)}))}setProjectName(e,t){console.log("setProjectName entered"),e<1&&console.log("setProjectName",e,t),this.settings.masterSettings.projectName[e]=t,this.notifyObservers()}setCurrentSequence(e){console.log("[SeqDebug] setCurrentSequence entered with: ",e),this.settings.masterSettings.currentSequence=e,console.log(`[SeqDebug] [setCurrentSequence] currentSequence set to: ${e}`),console.log(`[SeqDebug] [setCurrentSequence] Object currentSequence set to: ${this.settings.masterSettings.currentSequence}`)}getCurrentSequence(){return console.log("getCurrentSequence entered"),this.settings.masterSettings.currentSequence}getSequenceSettings(e){console.log("getSequenceSettings entered");const t=`Sequence${e}`;return this.settings.masterSettings.projectSequences[t]}setSequenceSettings(e,t){console.log("setSequenceSettings entered");const n=`Sequence${e}`;this.settings.masterSettings.projectSequences[n]=t}getSettings(e){if(console.log("getSettings entered",e),"masterSettings"===e)return console.log("[getSettings] Retrieved all masterSettings:",this.settings.masterSettings),this.settings.masterSettings;if(e){const t=this.settings.masterSettings[e];return console.log(`[getSettings] Retrieved setting for key '${e}':`,t),t}return console.log("[getSettings] Retrieved all settings:",this.settings),this.settings}checkSettings(){return console.log("checkSettings entered"),console.log("[checkSettings] Current masterSettings:",this.settings.masterSettings),this.settings.masterSettings}updateProjectSequencesUI(){console.log("updateProjectSequencesUI entered"),channelIndex<1&&console.log("updateProjectSequencesUI");this.getSettings("projectSequences").forEach(((e,t)=>{updateSequenceUI(t,e)}))}updateStepState(e,t,n,s){console.log("updateStepState entered"),t<1&&console.log(`[updateStepState] Called with Sequence: ${e}, Channel: ${t}, Step: ${n}, State: ${s}`);const r=this.settings.masterSettings.projectSequences[`Sequence${e}`],o=r&&r[`ch${t}`];o&&n<o.steps.length?o.steps[n]=s:console.error("Invalid sequence, channel, or step index in updateStepState")}getStepState(e,t,n){console.log("getStepState entered"),t<1&&console.log(`[getStepState] Called with Sequence: ${e}, Channel: ${t}, Step: ${n}`);const s=this.settings.masterSettings.projectSequences[`Sequence${e}`],r=s&&s[`ch${t}`];return r&&n<r.steps.length?r.steps[n]:(console.error("Invalid sequence, channel, or step index in getStepState"),null)}updateSetting(e,t,n=null){console.log("updateSetting entered"),n<1&&console.log(`[updateSetting] Called with key: ${e}, value: ${t}, channelIndex: ${n}`),null!==n&&Array.isArray(this.settings.masterSettings[e])?this.settings.masterSettings[e][n]=t:e in this.settings.masterSettings?this.settings.masterSettings[e]=t:console.error(`Setting ${e} does not exist in masterSettings`)}updateSampleDuration(e,t){console.log("updateSampleDuration entered"),t<1&&console.log(`[updateSampleDuration] Called with duration: ${e}, channelIndex: ${t}`),this.isValidIndex(t)?this.settings.masterSettings.trimSettings[t].length=e:console.error(`Invalid channel index: ${t}`)}getBPM(){return this.settings.masterSettings.projectBPM}setBPM(e){this.settings.masterSettings.projectBPM=e}setProjectChannelName(e,t){console.log("setProjectChannelName entered"),this.isValidIndex(e)?this.settings.masterSettings.projectChannelNames[e]!==t&&(this.settings.masterSettings.projectChannelNames[e]=t,console.log(`[setChannelName] Channel ${e} name set to: ${t}`),this.notifyObservers()):console.error(`[setChannelName] Invalid channel index: ${e}`)}setProjectSequences(e){console.log("setProjectSequences entered"),this.settings.masterSettings.projectSequences=e,console.log("[setProjectSequences] Project sequences set:",e),console.log("[setProjectSequences] currentSequence set to:",this.settings.masterSettings.currentSequence)}ensureArrayLength(e,t,n){for(console.log("ensureArrayLength entered");e.length<t;)e.push(n)}updateAllLoadSampleButtonTexts(){console.log("updateAllLoadSampleButtonTexts entered");document.querySelectorAll(".channel").forEach(((e,t)=>{const n=e.querySelector(".load-sample-button");n&&(()=>{this.updateLoadSampleButtonText(t,n)})()}))}updateLoadSampleButtonText(e,t){console.log("updateLoadSampleButtonText entered");let n="Load New Audional";const s=this.settings.masterSettings.projectChannelNames[e],r=this.settings.masterSettings.channelURLs[e];if(s)n=s;else if(r){const e=r.split("/");n=e[e.length-1]}t.textContent=n}updateProjectNameUI(e){console.log("Project name UI entered and updated:",e);const t=document.getElementById("project-name");t&&(t.value=e||"AUDX Project",console.log("Project name UI updated:",e))}updateBPMUI(e){const t=document.getElementById("bpm-slider"),n=document.getElementById("bpm-display");t&&n&&(t.value=e,n.textContent=e,console.log("BPM UI updated:",e))}updateProjectURLsUI(e){console.log("Project URLs UI entered and updated:",e),e.forEach(((e,t)=>{const n=document.getElementById(`url-input-${t}`);n&&(n.value=e)}))}updateProjectChannelNamesUI(e){console.log("Project URL names UI entered and updated:",e),e.forEach(((e,t)=>{const n=document.getElementById(`url-name-${t}`);n&&(n.textContent=e)}))}ensureArrayLength(e,t){for(;e.length<t;)e.push(this.getDefaultArrayElement())}getDefaultArrayElement(){return{start:.01,end:100,length:0}}}window.unifiedSequencerSettings=new UnifiedSequencerSettings;
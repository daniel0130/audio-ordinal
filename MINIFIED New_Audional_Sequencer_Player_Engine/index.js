let isPlaying=!1,currentStep=0,totalStepCount=0,beatCount=1,barCount=1,sequenceCount=1,currentSequence=0;const sequenceLength=64,maxSequenceCount=64,allSequencesLength=4096,collectedURLs=Array(16).fill("");let timeoutId,audioContext,currentStepTime,startTime,nextStepTime,stepDuration,isPaused=!1,pauseTime=0,stopClickCount=0,playButton=document.getElementById("play"),stopButton=document.getElementById("stop"),saveButton=document.getElementById("save-button"),gainNodes=Array(16).fill(null),isMuted=!1,channelMutes=[],muteState=!1,volumeStates=Array(16).fill(1),soloedChannels=Array(16).fill(!1),channels=document.querySelectorAll('.channel[id^="channel-"]'),activeChannels=16,clearClickedOnce=Array(channels.length).fill(!1),clearConfirmTimeout=Array(channels.length).fill(null);if(!audioContext)try{window.AudioContext=window.AudioContext||window.webkitAudioContext,audioContext=new AudioContext}catch(e){console.warn("Web Audio API is not supported in this browser")}function updateVolume(e,t){if(console.log("updateVolume entered"),soloedChannels.some((e=>e)))gainNodes[t].gain.value=soloedChannels[t]?1:0;else{const n=e.querySelector(".mute-button").classList.contains("selected");gainNodes[t].gain.value=n?0:1}}function updateDimState(e,t){console.log("updateDimState entered"),console.log(`updateDimState called for channel ${t}`);const n=window.unifiedSequencerSettings.getCurrentSequence(),o=e.querySelectorAll(`.step-button[id^="Sequence${n}-ch${t}"]`);0===gainNodes[t].gain.value?o.forEach((e=>e.classList.add("dimmed"))):o.forEach((e=>e.classList.remove("dimmed")))}if(document.addEventListener("click",(()=>{channels.forEach(((e,t)=>{if(clearClickedOnce[t]){e.querySelector(".clear-confirm").style.display="none",clearTimeout(clearConfirmTimeout[t]),clearClickedOnce[t]=!1}}))})),playButton&&stopButton){const t=document.querySelector("#channel-0 .step-button:nth-child(4n)");t&&t.classList.add("selected");const n=document.querySelector("#channel-1 .step-button:nth-child(1)");n&&n.classList.add("selected");const o=document.querySelector("#channel-1 .step-button:nth-child(6)");o&&o.classList.add("selected");let l=!1;function checkContinuousPlay(){document.getElementById("continuous-play").checked&&totalStepCount>=4096&&(beatCount=0,barCount=0,currentStep=0,totalStepCount=0,document.getElementById("next-sequence").click())}playButton.addEventListener("click",(()=>{let e=document.getElementById("continuous-play").checked;isPlaying?l?(resumeScheduler(),emitResume(),l=!1):(pauseScheduler(),emitPause(),l=!0):(startScheduler(),emitPlay(),playButton.classList.add("selected"),stopButton.classList.remove("selected"),isPlaying=!0,l=!1),e&&totalStepCount>=4096&&(beatCount=0,barCount=0,sequenceCount=0,currentStep=0,totalStepCount=0,sequenceCount++,sequenceCount>64&&(sequenceCount=1),loadPreset(`preset${sequenceCount}`)),checkContinuousPlay()})),stopButton.addEventListener("click",(()=>{isPlaying&&(stopScheduler(),emitStop(),stopButton.classList.add("selected"),playButton.classList.remove("selected"),isPlaying=!1,l=!1,beatCount=0,barCount=0,sequenceCount=0,currentStep=0,totalStepCount=0,resetStepLights())}))}else console.error("Play or Stop button is not defined");const loadPreset=e=>{console.log("index.js loadPreset entered"),console.log(`index.js loadPreset: Loading preset: ${e}`);const t=presets[e];t?(channels.forEach(((e,n)=>{const o=t.channels[n];if(!o)return void console.warn(`No preset data for channel index: ${n}`);const l=window.unifiedSequencerSettings.getChannelURL(n),{steps:a,mute:s}=o;if(l){const e=document.querySelector(`.channel[data-id="Channel-${n}"] .load-sample-button`);fetchAudio(l,n,e).then((()=>{const t=getAudioTrimmerInstanceForChannel(n);t&&t.loadSampleFromURL(l).then((()=>{const l=o.trimSettings?.startSliderValue||.01,a=o.trimSettings?.endSliderValue||t.totalSampleDuration;t.setStartSliderValue(l),t.setEndSliderValue(a),window.unifiedSequencerSettings.setTrimSettings(n,l,a),updateLoadSampleButtonText(n,e)}))}))}a.forEach((e=>{const t=document.querySelector(`.channel[data-id="Channel-${n}"] .step-button:nth-child(${e})`);t&&t.classList.add("selected")}));const u=document.querySelector(`.channel[data-id="Channel-${n}"]`);u&&(updateMuteState(u,s),u.classList.add("ordinal-loaded"))})),console.log(e),loadChannelSettingsFromPreset(presets[e]),console.log("loadPreset: After loadPreset, gainNodes values:",gainNodes.map((e=>e.gain.value)))):console.error("Preset not found:",e)};function updateLoadSampleButtonText(e,t){console.log("updateLoadSampleButtonText entered"),console.log(`[updateLoadSampleButtonText] Called for channel index: ${e}`);const n=window.unifiedSequencerSettings.channelURLs(e);console.log(`[updateLoadSampleButtonText] Loaded URL for channel ${e}: ${n}`),n?(t.textContent=n,console.log(`[updateLoadSampleButtonText] Button text updated to: ${n}`)):(t.textContent="Load New Audional",console.log("[updateLoadSampleButtonText] Default text set for button"))}function testUpdateLoadSampleButtonText(){console.log("[testUpdateLoadSampleButtonText] Function entered");document.querySelectorAll(".channel").forEach(((e,t)=>{const n=e.querySelector(".load-sample-button");n?(n.textContent=`Channel ${t+1}`,console.log(`[testUpdateLoadSampleButtonText] Button text updated for channel ${t+1}`)):console.log(`[testUpdateLoadSampleButtonText] No loadSampleButton found for channel ${t+1}`)}))}console.log("index.js loaded");
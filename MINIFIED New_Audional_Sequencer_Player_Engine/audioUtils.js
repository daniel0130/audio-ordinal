const audioBuffers=new Map;function getIDFromURL(e){console.log("[HTML Debugging] getIDFromURL entered");const t=e.split("/");return t[t.length-1]}function base64ToArrayBuffer(e){console.log("[HTML Debugging] [base64ToArrayBuffer] Entered function. Base64 sample:",e.substring(0,100));const t=atob(e),o=t.length,n=new Uint8Array(o);for(let e=0;e<o;e++)n[e]=t.charCodeAt(e);return console.log(`[HTML Debugging] [base64ToArrayBuffer] Generated Uint8Array length: ${n.length}`),n.buffer}const decodeAudioData=e=>{let t=new Uint8Array(e.slice(0,20));return console.log("[HTML Debugging] [decodeAudioData] ArrayBuffer first 20 bytes:",t.join(", ")),new Promise(((t,o)=>{audioContext.decodeAudioData(e,(e=>{console.log("[HTML Debugging] [decodeAudioData] Audio data decoded successfully."),t(e)}),(e=>{console.error("[HTML Debugging] [decodeAudioData] Detailed Error:",{message:e.message,code:e.code}),o(e)}))}))},fetchAudio=async(e,t)=>{const o=formatURL(e);console.log("[HTML Debugging] [fetchAudio] Entered function. URL:",o,"Channel Index:",t);try{const e=await fetch(o),n=e.headers.get("Content-Type");let a;if(n&&n.includes("text/html")){const o=await e.text(),n=await importHTMLAudioData(o,t);if(!n)return;a=n.startsWith("data:")?base64ToArrayBuffer(n.split(",")[1]):await fetch(n).then((e=>e.arrayBuffer()))}else a=await e.arrayBuffer();const r=await decodeAudioData(a);audioBuffers.set(o,r),console.log("[HTML Debugging] [fetchAudio] Audio buffer stored.")}catch(e){console.error("[HTML Debugging] [fetchAudio] Error:",e)}};async function importHTMLAudioData(e,t){console.log("[importHTMLSampleData] Entered function with index: ",t);try{const t=new DOMParser,o=t.parseFromString(e,"text/html").querySelector("audio[data-audionalSampleName] source");if(o){const e=o.getAttribute("src");if(e.toLowerCase().startsWith("data:audio/wav;base64,")||e.toLowerCase().startsWith("data:audio/mp3;base64,"))return console.log("[importHTMLSampleData] Extracted base64 audio data."),e;console.error("[importHTMLSampleData] Audio data does not start with expected base64 prefix.")}else console.error("[importHTMLSampleData] Could not find the audio source element in the HTML content.")}catch(e){console.error("[importHTMLSampleData] Error parsing HTML content: ",e)}return null}function bufferToBase64(e){console.log("bufferToBase64 entered");let t="";const o=new Uint8Array(e),n=o.byteLength;console.log(`[HTML Debugging] [bufferToBase64] Buffer length: ${n}`);for(let e=0;e<n;e++)t+=String.fromCharCode(o[e]);const a=window.btoa(t);return console.log(`[HTML Debugging] [bufferToBase64] Converted to base64, length: ${a.length}`),a}function playSound(e,t,o){console.log("playSound entered");const n=getChannelIndex(t);console.log(`[playSound Debugging] [playSound] Processing channel index: ${n}`);const a=getStepState(e,n,o);if(console.log(`[playSound Debugging] [playSound] setting stepState using getStepState to: ${a}`),!a)return void console.log("[playSound Debugging] [playSound] Current step is not selected. Skipping playback.");const r=getAudioUrl(n);console.log("[playSound Debugging] [playSound] Audio URL:",r);const i=getAudioBuffer(r);i?(console.log("[playSound Debugging] [playSound] Audio buffer:",i),playTrimmedAudio(n,i,r)):console.log("[playSound Debugging] [playSound] No audio buffer found for URL:",r)}function getChannelIndex(e){return parseInt(e.dataset.id.split("-")[1])}function getStepState(e,t,o){return console.log(`[playSound Debugging] [getStepState called] currentSequence: ${e}, channelIndex: ${t}, currentStep: ${o}`),window.unifiedSequencerSettings.getStepState(e,t,o)}function getAudioUrl(e){return void 0===window.unifiedSequencerSettings.getprojectUrlforChannel(e)?(console.error(`[getAudioUrl] [ playSound ] URL not found for channel index: ${e}`),"defaultURL"):window.unifiedSequencerSettings.getprojectUrlforChannel(e)}function getAudioBuffer(e){return audioBuffers.get(e)}function playTrimmedAudio(e,t,o){console.log("playTrimmedAudio entered"),console.log("[playTrimmedAudio] Audio buffer found for URL:",o);const n=audioContext.createBufferSource();n.buffer=t;const{trimStart:a,duration:r}=calculateTrimValues(e,t);n.connect(gainNodes[e]),gainNodes[e].connect(audioContext.destination),console.log(`[debug - playSound] Playing audio from URL: ${o} for channel index: ${e} at trimStart: ${a} and duration: ${r}`),n.start(0,a,r)}function calculateTrimValues(e,t){const o=window.unifiedSequencerSettings.getTrimSettings(e);let n=o.startSliderValue/100*t.duration,a=o.endSliderValue/100*t.duration;return n=Math.max(0,Math.min(n,t.duration)),a=Math.max(n,Math.min(a,t.duration)),{trimStart:n,duration:a-n}}async function playAuditionedSample(e){console.log("playAuditionedSample entered");try{const t=formatURL(e),o=await fetch(t),n=await o.json();if(n.audioData){const e=base64ToArrayBuffer(n.audioData.split(",")[1]);audioContext||(window.AudioContext=window.AudioContext||window.webkitAudioContext,audioContext=new AudioContext);const t=await decodeAudioData(e),o=audioContext.createBufferSource();o.buffer=t,o.connect(audioContext.destination),o.start()}else{console.log("Audional data not found in response, attempting to fetch and parse content type.");const t=await fetchAndParseContentType(e);console.log(`Content type found: ${t}`)}}catch(e){console.error("Error playing auditioned sample:",e)}}function togglePlayState(e,t,o,n){console.log("togglePlayState entered"),e||(e=!0,t(),o.classList.add("selected"),n.classList.remove("selected"))}function updateMuteState(e,t){console.log("updateMuteState entered"),console.log("updateMuteState - isMuted: "+t);const o=parseInt(e.dataset.id.split("-")[1]);e.dataset.muted=t?"true":"false";e.querySelector(".mute-button").classList.toggle("selected",t),channelMutes[o]=t,gainNodes[o].gain.value=t?0:1,updateDimState(e,o)}function toggleMute(e){console.log("toggleMute entered");const t=parseInt(e.dataset.id.split("-")[1]);updateMuteState(e,!channelMutes[t],t),console.log("Mute has been toggled by the toggleMute function")}
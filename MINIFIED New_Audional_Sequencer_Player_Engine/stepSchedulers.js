function startScheduler(){channels.forEach((e=>{const t=parseInt(e.dataset.id.split("-")[1]);channelMutes[t]||setChannelVolume(t,1)})),clearTimeout(timeoutId),audioContext.resume(),startTime=audioContext.currentTime,nextStepTime=startTime;const e=window.unifiedSequencerSettings.getBPM();console.log(`[startScheduler] Current BPM from global settings: ${e}`),scheduleNextStep()}function pauseScheduler(){clearTimeout(timeoutId),audioContext.suspend(),pauseTime=audioContext.currentTime,isPaused=!0}function resumeScheduler(){isPaused&&(audioContext.resume(),nextStepTime=audioContext.currentTime,isPaused=!1),scheduleNextStep()}function scheduleNextStep(){console.log("[scheduleNextStep] Attempting to play sound for Channel:","Step:",currentStep);const e=window.unifiedSequencerSettings.getBPM()||105;console.log(`[scheduleNextStep] Current BPM: ${e}`),stepDuration=60/e/4,console.log(`[scheduleNextStep] Step Duration: ${stepDuration}`),timeoutId=setTimeout((()=>{playStep(),scheduleNextStep()}),1e3*(nextStepTime-audioContext.currentTime))}function stopScheduler(){channels.forEach((e=>{setChannelVolume(parseInt(e.dataset.id.split("-")[1]),0)})),clearTimeout(timeoutId),currentStep=0,beatCount=1,barCount=1,sequenceCount=0,isPaused=!1,pauseTime=0}function resetStepLights(){document.querySelectorAll(".step-button").forEach((e=>{e.classList.remove("playing")}))}